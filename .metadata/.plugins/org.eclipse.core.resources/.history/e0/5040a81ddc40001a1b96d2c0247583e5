package org.zerock.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.zerock.domain.BoardVO;
import org.zerock.service.BoardService;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@Log4j
@RequestMapping("/board/*")
@AllArgsConstructor
public class BoardController {
	private BoardService service;
	
	@GetMapping("/list")
	public void list(Model model) {
		log.info("list");
		model.addAttribute("list", service.getList());
	}
	
	@GetMapping("/register")
	public void register() {
		
	}
	
	/**
	 * String 을 리턴 타입으로 지정하고, RedirectAttributes 를 파라미터로 지정함.
	 * 이는 등록작업이 끝난 후 다시 목록 화면으로 이동하기 위함인데, 추가적으로 새롭게 등록된 게시물의 번호를 같이 전달하기 위해서 RedirectAttributes를 이용함.
	 * @param board
	 * @param rttr
	 * @return
	 */
	@PostMapping("/register")
	public String register(BoardVO board, RedirectAttributes rttr) {
		log.info("register: " + board);
		service.register(board);
		rttr.addFlashAttribute("result", board.getBno());
		return "redirect:/board/list";
	}
	
	/**
	 * @GetMapping 이나 @PostMapping 등에는 URL을 배열로 처리할 수 있으므로, 아래와 같이 하나의 메서드로 여러 URL을 처리할 수 있습니다.
	 * @param bno
	 * @param model
	 */
	@GetMapping({"/get", "/modify"})
	public void get(@RequestParam("bno") Long bno, Model model) {
		log.info("/get or modify");
		model.addAttribute("board", service.get(bno));
	}
	
	/**
	 * bno 값을 좀 더 명시적으로 처리하는 @RequestParam 을 이용해서 지정함(파라미터 이름과 변수 이름을 기준으로 동작하기 때문에 생략해도 무방함.)
	 * 또한, 화면 쪽으로 해당 번호의 게시물을 전달해야 하므로 Model 파라미터를 지정
	 * @param bno
	 * @param model
	 */
//	@GetMapping("/get")
//	public void get(@RequestParam("bno") Long bno, Model model) {
//		log.info("/get");
//		model.addAttribute("board",service.get(bno));
//	}
//	
	
	@PostMapping("/modify")
	public String modify(BoardVO board, RedirectAttributes rttr) {
		log.info("modify: " +board);
		if (service.modify(board)) {
			rttr.addFlashAttribute("result", board.getBno()); //"success"
		}
		return "redirect:/board/list";
	}
	
	@PostMapping("/remove")
	public String remove(@RequestParam("bno") Long bno, RedirectAttributes rttr) {
		log.info("remove: " +bno);
		if (service.remove(bno)) {
			rttr.addFlashAttribute("result", board.getBno());
		}
		return "redirect:/board/list";
	}
}
