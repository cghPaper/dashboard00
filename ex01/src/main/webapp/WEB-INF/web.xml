<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- root-context.xml 경로가 설정되어 있음 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<!-- 
		 해당 웹 애플리케이션 구동 시 같이 동작
		root-context.xml이 처리되면 파일에 있는 빈(Bean) 설정들이 동작하게 됨.
		- root-context.xml에 정의된 객체(Bean)들은 스프링 영역(Context) 안에 생성되고, 객체들 간의 의존성이 처리됨 
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<!-- 
		  사용자의 Request는 Front-Controller인 DispatcherServlet을 통해서 처리함.
		 org.springframework.web.servlet.DispatcherServlet: 스프링 MVC의 구조에서 가장 핵심적인 역할을 하는 클래스 
		 servlet-context.xml: 내부적으로 웹 관련 처리의 준비작업을 진행하는데 사용하는 파일
		  이 과정에서 등록된 객체(Bean)들은 기존에 만들어진 객체(Bean)들과 같이 연동하게 됨.
	-->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<!-- 
			잘못된 URL을 호출할 때 보이는 404 에러 페이지의 경우는 조금 다르게 처리하는 것이 좋음
			스프링 MVC의 모든 요청은 DispatcherServlet을 이용해서 처리되므로 404 에러도 같이 처리할 수 있도록 함.
		 -->
		<init-param>
			<param-name>throwExceptionIfNoHandlerFound</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>
